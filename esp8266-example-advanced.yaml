esphome:
  name: "${lower_devicename}"
  platform: ESP8266
  board: d1_mini

external_components:
  - source: github://KinDR007/VictronSmartShunt-ESPHOME@main
    refresh: 0s

substitutions:
  lower_devicename: "smartshunt"
  devicename: "SmartShunt_500A"
  config_version: "v2021.06.02.001"
  # wifi_fast_connect: "false"
  # wifi_reboot_timeout: 0s
  accuracy: "2"

wifi:
  ssid: "wi-Fi name"
  password: "wifipassword"
  power_save_mode: none

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${devicename} Hotspot"
    password: "mppt15035"

captive_portal:

logger:
  baud_rate: 0

api:
ota:

web_server:
  port: 80

time:
  - platform: homeassistant

uart:
  id: uart0
  tx_pin: D8
  rx_pin: D7
  baud_rate: 19200
  stop_bits: 1
  data_bits: 8
  parity: NONE
  rx_buffer_size: 256

victron:
  uart_id: uart0

sensor:
  - platform: wifi_signal
    name: "${devicename} WiFi Signal Sensor"
    id: rssi_sensor
    update_interval: 15s

  - platform: template
    name: "Wifi Quality"
    unit_of_measurement: "%"
    accuracy_decimals: 0
    icon: "mdi:wifi"
    update_interval: 15s
    lambda: |-
        int quality;
        const int rssi = id(rssi_sensor).state;
          if (rssi <= -100) { quality = 0;}
          else if (rssi >= -50)
          {  quality = 100; }
          else
          {  quality = 2 * (rssi + 100); }
          return quality;

  - platform: uptime
    name: "${devicename} Uptime"
    id: uptime_s
    update_interval: 5s

  - platform: victron
    battery_voltage:
      name: "Battery Voltage"
      id: bv
      accuracy_decimals: ${accuracy}

    battery_current:
      name: "Battery Current"
      id: bc
      accuracy_decimals: ${accuracy}

    fw_version:
      name: "fw"
      id: fw

    pid:
      name: "pid"
      id: pid

    instantaneous_power:
      name: "instantaneous power"
      id: instantaneous_power
      accuracy_decimals: ${accuracy}

    time_to_go:
      name: "time to go"
      id: time_to_go

    consumed_amp_hours:
      name: "consumed amp hours"
      id: consumed_amp_hours
      unit_of_measurement: Ah
      accuracy_decimals: ${accuracy}

    min_battery_voltage:
      name: "Min battery voltage"
      id: min_battery_voltage
      accuracy_decimals: ${accuracy}

    max_battery_voltage:
      name: "Max battery voltage"
      id: max_battery_voltage
      accuracy_decimals: ${accuracy}

    amount_of_charged:
      name: "Amount of charged"
      id: amount_of_charged
      filters:
        - multiply: 0.001
      unit_of_measurement: kWh
      accuracy_decimals: ${accuracy}


    bmv_alarm:
      name: "BMV alarm"
      id: bmv_alarm

    bmv_pid:
      name: "bmv - pid"
      id: bmv_pid

    last_full_charge:
      name: "Time since last full charge"
      id: last_full_charge

    deepest_discharge:
      name: "Depth of the deepest discharge"
      id: deepest_discharge
      unit_of_measurement: Ah
      accuracy_decimals: ${accuracy}

    last_discharge:
      name: "Depth of the last discharge"
      id: last_discharge
      unit_of_measurement: Ah
      accuracy_decimals: ${accuracy}

    discharged_energy:
      name: "Amount of discharged energy"
      id: discharged_energy
      filters:
        - multiply: 0.001
      unit_of_measurement: kWh
      accuracy_decimals: ${accuracy}

    state_of_charge:
      id: state_of_charge
      name: "SoC"

text_sensor:
  - platform: template
    name: "Config Version"
    icon: mdi:information-outline
    lambda: |-
      return {"${config_version}"};

  - platform: version
    name: "Esphome Version"
    icon: mdi:information-outline

  - platform: wifi_info
    ip_address:
      name: "${devicename} IP Address"
      icon: mdi:ip
    ssid:
      name: "${devicename} Connected SSID"
      icon: mdi:wifi
    bssid:
      name: "${devicename} Connected BSSID"
    mac_address:
      name: "${devicename} Mac Wifi Address"

  - platform: template
    name: "${devicename} Uptime (formatted)"
    lambda: |-
          uint32_t dur = id(uptime_s).state;
          int dys = 0;
          int hrs = 0;
          int mnts = 0;
          if (dur > 86399) {
            dys = trunc(dur / 86400);
            dur = dur - (dys * 86400);
          }
          if (dur > 3599) {
            hrs = trunc(dur / 3600);
            dur = dur - (hrs * 3600);
          }
          if (dur > 59) {
            mnts = trunc(dur / 60);
            dur = dur - (mnts * 60);
          }
          char buffer[17];
          sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
          return {buffer};
    icon: mdi:clock-start
    update_interval: 5s

switch:
  - platform: restart
    icon: mdi:reload-alert
    name: "${devicename} Restart"
